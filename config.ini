[project]

# The project name, used as the filename of the package and the PDF file. For
# example, if set to d2l-book, then will build d2l-book.zip and d2l-book.pdf
name = d2l-en

# Book title. It will be displayed on the top-right of the HTML page and the
# front page of the PDF file
title = Dive into Deep Learning

author = Aston Zhang, Zachary C. Lipton, Mu Li, and Alexander J. Smola

copyright = 2021, All authors. Licensed under CC-BY-SA-4.0 and MIT-0.

release = 0.17.0


[build]

# A list of wildcards to indicate the markdown files that need to be evaluated as
# Jupyter notebooks.
notebooks = *.md  */*.md

# A list of files that will be copied to the build folder.
resources = img/ d2l/ d2l.bib setup.py

# Files that will be skipped.
exclusions = README.md STYLE_GUIDE.md INFO.md CODE_OF_CONDUCT.md CONTRIBUTING.md contrib/*md

# If True (default), then will evaluate the notebook to obtain outputs.
eval_notebook = True

tabs = mxnet, pytorch, tensorflow

[html]

# A list of links that is displayed on the navbar. A link consists of three
# items: name, URL, and a fontawesome icon
# (https://fontawesome.com/icons?d=gallery). Items are separated by commas.
# PDF, http://numpy.d2l.ai/d2l-en.pdf, fas fa-file-pdf,
header_links = MXNet, https://d2l.ai/d2l-en.pdf, fas fa-file-pdf,
               PyTorch, https://d2l.ai/d2l-en-pytorch.pdf, fas fa-file-pdf,
               Notebooks, https://d2l.ai/d2l-en.zip, fab fa-python,
               Courses, https://courses.d2l.ai, fas fa-user-graduate,
               GitHub, https://github.com/d2l-ai/d2l-en, fab fa-github,
               中文版, https://zh.d2l.ai, fas fa-external-link-alt

favicon = static/favicon.png

html_logo = static/logo-with-text.png

include_css = static/d2l.css


[pdf]

# The file used to post-process the generated tex file.
post_latex = ./static/post_latex/main.py

latex_logo = static/logo.png
main_font = Source Serif Pro
sans_font = Source Sans Pro
mono_font = Inconsolata


[library]

version_file = d2l/__init__.py

[library-mxnet]

lib_file = d2l/mxnet.py
lib_name = np

# Map from d2l.xx to np.xx
simple_alias = ones_like, ones, zeros_like, zeros, arange, meshgrid, sin, sinh, cos, cosh, tanh,
               linspace, exp, log, tensor -> array, normal -> random.normal,
               randn -> random.randn, expand_dims
               rand -> random.rand, matmul -> dot, int32, int64, float32,
               concat -> concatenate, stack, abs, eye

# Map from d2l.xx(a, *args, **kwargs) to a.xx(*args, **kwargs)
fluent_alias = numpy -> asnumpy, reshape, to -> as_in_context, reduce_sum -> sum,
               argmax, astype, reduce_mean -> mean, swapaxes, repeat

alias =
       size = lambda a: a.size
       transpose = lambda a: a.T
       nn_Module = nn.Block
       sigmoid = npx.sigmoid
       batch_matmul = npx.batch_dot

reverse_alias =
       d2l.size\(([\w\_\d]+)\) -> \1.size
       d2l.transpose\(([\w\_\d]+)\) -> \1.T
       d2l.nn_Module -> nn.Block
       d2l.sigmoid -> npx.sigmoid
       d2l.batch_matmul -> npx.batch_dot

[library-pytorch]

lib_file = d2l/torch.py
lib_name = torch

simple_alias = ones_like, ones, zeros_like, zeros, tensor, arange, meshgrid, sin, sinh, cos, cosh,
               tanh, linspace, exp(, log, normal, rand, randn, matmul, int32, int64, float32,
               concat -> cat, stack, abs, eye, sigmoid, batch_matmul -> bmm

fluent_alias = numpy -> detach().numpy, size -> numel, reshape, to,
               reduce_sum -> sum, argmax, astype -> type, transpose -> t,
               reduce_mean -> mean, expand_dims -> unsqueeze, swapaxes, repeat
alias =
       nn_Module = nn.Module

reverse_alias =
       d2l.nn_Module -> nn.Module

[library-tensorflow]

lib_file = d2l/tensorflow.py
lib_name = tf

simple_alias = reshape, ones_like, ones, zeros_like, zeros, meshgrid, sin, sinh, cos, cosh, tanh,
               linspace, exp, normal -> random.normal, rand -> random.uniform,
               matmul, reduce_sum, reduce_mean, argmax, tensor -> constant,
               arange -> range, astype -> cast, int32, int64, float32, transpose,
               concat, stack, abs, eye, log -> math.log, sigmoid, expand_dims, repeat,
               batch_matmul -> matmul

fluent_alias = numpy,

alias =
       size = lambda a: tf.size(a).numpy()

reverse_alias =
       d2l.size\(([\w\_\d]+)\) -> tf.size(\1).numpy()
       d2l.nn_Module -> tf.keras.Model


[deploy]

other_file_s3urls = s3://d2l-webdata/releases/d2l-en/d2l-en-0.7.0.zip
                    s3://d2l-webdata/releases/d2l-en/d2l-en-0.7.1.zip

google_analytics_tracking_id = UA-96378503-10


[colab]

github_repo = mxnet, d2l-ai/d2l-en-colab
              pytorch, d2l-ai/d2l-pytorch-colab
              tensorflow, d2l-ai/d2l-tensorflow-colab

replace_svg_url = img, http://d2l.ai/_images

libs = mxnet, mxnet, -U mxnet-cu101==1.7.0
       mxnet, d2l, d2l==RELEASE
       pytorch, d2l, d2l==RELEASE
       tensorflow, d2l, d2l==RELEASE


[sagemaker]

github_repo = mxnet, d2l-ai/d2l-en-sagemaker
              pytorch, d2l-ai/d2l-pytorch-sagemaker
              tensorflow, d2l-ai/d2l-tensorflow-sagemaker

kernel = mxnet, conda_mxnet_p36
         pytorch, conda_pytorch_p36
         tensorflow, conda_tensorflow_p36

libs = mxnet, mxnet, -U mxnet-cu101==1.7.0
       mxnet, d2l, ..  # installing d2l
       pytorch, d2l, .. # installing d2l
       tensorflow, d2l, .. # installing d2l

[slides]

top_right = <img height=80px src='http://d2l.ai/_static/logo-with-text.png'/>

github_repo = pytorch, d2l-ai/d2l-pytorch-slides
